{
    "version": "https://jsonfeed.org/version/1",
    "title": "我们",
    "description": "",
    "home_page_url": "http://koke.love",
    "feed_url": "http://koke.love/feed.json",
    "user_comment": "",
    "author": {
        "name": "koke"
    },
    "items": [
        {
            "id": "http://koke.love/vimbian-ji-qi-yu-shellming-ling-jiao-ben.html",
            "url": "http://koke.love/vimbian-ji-qi-yu-shellming-ling-jiao-ben.html",
            "title": "Vim编辑器与Shell命令脚本",
            "summary": "vi/vim编辑器 vim编辑器有颜色，vi编辑器没有 默认打开：命令模式 编辑模式： i，a，o 末行模式： 进入到网卡配置文件所在的目录，然后编辑网卡配置文件，在其中填入下面的信息： [root@linuxprobe ~]# cd /etc/sysconfig/network-scripts/ [root@linuxprobe network-scripts]# vim ifcfg-ens160 TYPE=Ethernet BOOTPROTO=static NAME=ens160 ONBOOT=yes IPADDR=192.168.10.10 NETMASK=255.255.255.0 GATEWAY=192.168.10.1 DNS1=192.168.10.1 执行重启网卡设备的命令，然后通过ping命令测试网络能否连通。 systemctl restart network nmcli connection reload ens160 ping 192.168.10.10 Shell命令脚本 **1、 交互式（Interactive）**：用户每输入一条命令就立即执行。 **2、批处理（Batch）**：由用户事先编写好一个完整的Shell脚本，Shell会一次性执行脚本中诸多的命令。 脚本声明 #!/bin/bash 脚本注释 #txykoke.cn编写 脚本命令 ls pwd #!/bin/bash&hellip;",
            "content_html": "<h3 id=\"vivim编辑器\">vi/vim编辑器</h3>\n<p>vim编辑器有颜色，vi编辑器没有</p>\n<p>默认打开：命令模式</p>\n<p>编辑模式： i，a，o</p>\n<p>末行模式：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>:w</td>\n<td>保存</td>\n</tr>\n<tr>\n<td>:q</td>\n<td>退出</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td>强制退出（放弃对文档的修改内容）</td>\n</tr>\n<tr>\n<td>:wq!</td>\n<td>强制保存退出</td>\n</tr>\n<tr>\n<td>:set nu</td>\n<td>显示行号</td>\n</tr>\n<tr>\n<td>:set nonu</td>\n<td>不显示行号</td>\n</tr>\n<tr>\n<td>:命令</td>\n<td>执行该命令</td>\n</tr>\n<tr>\n<td>:整数</td>\n<td>跳转到该行</td>\n</tr>\n<tr>\n<td>:s/one/two</td>\n<td>将当前光标所在行的第一个one替换成two</td>\n</tr>\n<tr>\n<td>:s/one/two/g</td>\n<td>将当前光标所在行的所有one替换成two</td>\n</tr>\n<tr>\n<td>:%s/one/two/g</td>\n<td>将全文中的所有one替换成two</td>\n</tr>\n<tr>\n<td>?字符串</td>\n<td>在文本中从下至上搜索该字符串</td>\n</tr>\n<tr>\n<td>/字符串</td>\n<td>在文本中从上至下搜索该字符串</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用vim配置网卡信息\">使用vim配置网卡信息</h3>\n<p>进入到网卡配置文件所在的目录，然后编辑网卡配置文件，在其中填入下面的信息：</p>\n<pre><code class=\"language-shell\">[root@linuxprobe ~]# cd /etc/sysconfig/network-scripts/\n[root@linuxprobe network-scripts]# vim ifcfg-ens160\nTYPE=Ethernet\nBOOTPROTO=static\nNAME=ens160\nONBOOT=yes\nIPADDR=192.168.10.10\nNETMASK=255.255.255.0\nGATEWAY=192.168.10.1\nDNS1=192.168.10.1\n</code></pre>\n<p>执行重启网卡设备的命令，然后通过ping命令测试网络能否连通。</p>\n<pre><code class=\"language-shell\">systemctl restart network\nnmcli connection reload ens160\nping 192.168.10.10\n</code></pre>\n<h3 id=\"shell命令脚本\">Shell命令脚本</h3>\n<p>**<font color=\"#0000dd\">1、 交互式（Interactive）</font>**：用户每输入一条命令就立即执行。\n**<font color=\"#0000dd\">2、批处理（Batch）</font>**：由用户事先编写好一个完整的Shell脚本，Shell会一次性执行脚本中诸多的命令。</p>\n<p>脚本声明  #!/bin/bash</p>\n<p>脚本注释  #txykoke.cn编写</p>\n<p>脚本命令  ls pwd</p>\n<pre><code class=\"language-shell\"> #!/bin/bash\n #txykoke.cn编写\n echo &quot;$0&quot; 脚本名称\n echo &quot;$#&quot; 总共接受了几个参数\n echo &quot;$*&quot;参数分别是什么\n echo &quot;$1,$2,$5&quot; 接收到第1个第3个第5个的参数\n</code></pre>\n<pre><code>[root@txykoke koke]# bash haha.sh a b c d e f\nhaha.sh\n6\na b c d e f\na,b,e\n[root@txykoke koke]# \n</code></pre>\n<p>测试语句格式：[ 条件表达式 ] （两边均有一个空格）</p>\n<h3 id=\"文件测试所用的参数\">文件测试所用的参数</h3>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>测试文件是否为目录类型</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>测试文件是否存在</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>判断是否为一般文件</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>测试当前用户是否有权限读取</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>测试当前用户是否有权限写入</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>测试当前用户是否有权限执行</td>\n</tr>\n</tbody></table>\n<p><strong><font color=\"#0000dd\">判断是否是目录</font></strong></p>\n<pre><code class=\"language-shell\">#如果返回值为0，则目录存在；如果返回值为非零的值，则意味着它不是目录，或这个目录不存在\n[ -d /etc/koke ]\necho $?\n</code></pre>\n<pre><code class=\"language-shell\">#判断/dev/cdrom文件是否存在，若存在则输出Exist字样。\n[ -e /dev/cdrom ] &amp;&amp; echo &quot;Exist&quot;\n</code></pre>\n<pre><code class=\"language-shell\">#判断用户是否不是管理员账户，不是管理员账号账户则输出root\n[ ! $USER = root ] || echo &quot;root&quot;\n</code></pre>\n<pre><code class=\"language-shell\">#先判断当前用户是否root,然后!取反，如果当前不是root用户，则输出user,反之输出root\n[ ! $USER = root ] &amp;&amp; echo &quot;user&quot; || echo &quot;root&quot;\n</code></pre>\n<h3 id=\"tips\"><strong>Tips</strong></h3>\n<p>&amp;&amp;是逻辑“与”，只有当前面的语句执行成功的时候才会执行后面的语句。\n||是逻辑“或”，只有当前面的语句执行失败的时候才会执行后面的语句。\n!是逻辑“非”，代表对逻辑测试结果取反值；之前若为正确则变成错误，若为错误则变成正确。</p>\n<h3 id=\"整数比较运算符\">整数比较运算符</h3>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-eq</td>\n<td>是否等于</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>是否不等于</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>是否大于</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>是否小于</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>是否等于或小于</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>是否大于或等于</td>\n</tr>\n</tbody></table>\n<pre><code class=\"language-shell\">#创建一个变量num 如果10大于num成立 则输出0\nnum=100;\n[ 10 -gt $num ]\necho $?\n</code></pre>\n<pre><code class=\"language-shell\">#判断当前服务器内存，并设置警告值\nFreeMem=`free -m |grep Mem: |awk &#39;{print$4}&#39;`\n[ $FreeMem -lt 300] &amp;&amp; echo &quot;内存告急：小于300m,请检查/升级配置&quot;|| echo &quot;内存余量正常&quot;\n</code></pre>\n<p> <strong><font color=\"#0000dd\">常见的字符串比较运算符</font></strong></p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>比较字符串内容是否相同</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>比较字符串内容是否不同</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>判断字符串内容是否为空</td>\n</tr>\n</tbody></table>\n<pre><code class=\"language-shell\">#接下来通过判断FreeMem变量是否为空值，进而判断是否定义了这个变量：\n[ -z $FreeMem ]\necho $?\n[ -z $LANG ]\necho $?\n</code></pre>\n<h3 id=\"流程控制语句\"><strong>流程控制语句</strong></h3>\n<p><strong><font color=\"#0000dd\">if条件测试语句</font></strong></p>\n<pre><code class=\"language-shell\">#!/bin/bash\n#测试主机是否在线\nread -p &quot;请输入您的ip地址：&quot;  ip\nping -c 3 -i 0.2 -W 3 $ip &amp;&gt; /dev/null\nif [ `echo $?` -eq 0 ];then\n    echo &quot;地址 $ip 是在线的&quot;\nelse \n    echo &quot;地址 $ip 是不在线的&quot;\nfi\n</code></pre>\n<pre><code class=\"language-shell\">#创建成绩表 a.txt\n张三 40\n李四 89\nkoke 60\n亚男 59\n</code></pre>\n<pre><code class=\"language-shell\">#!/bin/bash\n#判断学生学习成绩1\nread -p &quot;Enter your score（0-100）：&quot; GRADE\nif [ $GRADE -ge 85 ] &amp;&amp; [ $GRADE -le 100 ] ; then\n        echo &quot;$GRADE is Excellent&quot;\nelif [ $GRADE -ge 70 ] &amp;&amp; [ $GRADE -le 84 ] ; then\n        echo &quot;$GRADE is Pass&quot;\nelse\n        echo &quot;$GRADE is Fail&quot; \nfi\n</code></pre>\n<p><strong><font color=\"#0000dd\">for条件循环语句</font></strong></p>\n<pre><code class=\"language-shell\">#!/bin/bash\n#判断学生学习成绩2\nread -p &quot;请输入您的姓名：&quot; Result\necho &quot;请稍等，正在查询您的成绩&quot;\nsleep 1\n#备份旧的IFS变量\nOLDIFS=&quot;IFS&quot;  \n#修改分隔符为换行符\nIFS=$&#39;\\n&#39;  \n#文件行数\nn=`wc -l a.txt|awk &#39;{print$1}&#39;`\n#循环次数\ns=0\nfor name in `cat a.txt`\ndo\n    s=`expr $s + 1`\n    if [ `echo $name |awk &#39;{print$1}&#39;` = `echo $Result` ]\n    then\n        echo &quot;您的成绩是：&quot;`echo $name |awk &#39;{print$2}&#39;`&quot;分&quot;\n        #记录分数到num\n        num=`echo $name |awk &#39;{print$2}&#39;`\n        sleep 1\n        if [ $num -ge 85 ]&amp;&amp; [ $num -le 100 ];then\n            echo &quot;您的评级：优秀&quot;\n            break\n        elif [ $num -ge 70 ] &amp;&amp; [ $num -le 84 ];then\n            echo &quot;您的评级：良好&quot;\n            break\n        elif [ $num -ge 60 ] &amp;&amp; [ $num -le 69 ];then\n            echo &quot;您的评级：合格&quot;\n            break\n        elif [ $num -lt 60 ] &amp;&amp; [ $num -ge 0 ];then\n            echo &quot;您的评级：不合格&quot;\n            break\n        else\n            echo &quot;查询到成绩不合法&quot;\n            break\n        fi\n    elif [ $s -eq $n ]&amp;&amp;[ `echo $name |awk &#39;{print$1}&#39;` != `echo $Result` ];then\n        echo &quot;未匹配到您输入的姓名，请检查&quot;\n    fi\n     \ndone\n#还原IFS变量\nIFS=&quot;$OLDIFS&quot;\n</code></pre>\n<pre><code class=\"language-shell\">#创建用户名表\nvim users.txt\nandy\nbarry\ncarl\nduke\neric\ngeorge\n</code></pre>\n<pre><code class=\"language-shell\">#!/bin/bash\n#批量创建用户\nread -p &quot;请输入你的密码：&quot; PASSWD\nfor UNAME in `cat user.txt`\ndo\n    id $UNAME $&gt; /dev/null\n    if [ $? -eq 0 ];then\n        echo &quot;$UNAME ,用户已经存在&quot;\n    else\n        useradd $UNAME\n        echo &quot;$PASSWD&quot;|PASSWD ==stdin $UNAME &amp;&gt;/dev/null\n        echo &quot;$UNAME，用户创建成功&quot;\n    fi\ndone\n</code></pre>\n<pre><code class=\"language-shell\">#!/bin/bash\n#批量检测IP地址是否在线\n#创建ip地址文件：ipaddr.txt\nHost=`cat ipaddr.txt`\ntouch online.txt &amp;&gt; /dev/null\nfor IP in $Host\ndo\n    ping -c 1 $IP &amp;&gt; /dev/null\n    if [ $? -eq 0 ];then\n        echo $IP &gt;&gt; online.txt\n    else\n        echo &quot;$IP 不在线&quot;\n    fi\ndone\necho &quot;在线IP：&quot;\ncat online.txt\n</code></pre>\n<p><strong>自己做的一个小脚本</strong></p>\n<pre><code class=\"language-shell\">#!/bin/bash\n#经过一些if语句和for循环查询学习,做了这个将疑似DDOS攻击的ip地址加入黑名单，\n#只需要简单设置自己服务器IP以及IP的访问量，就可以一键运行并自动拉黑。\n# 判断是否安装了nload\nif ! type nload &gt;/dev/null 2&gt;&amp;1\nthen\n    echo &quot;nload 未安装&quot;\n    yum install nload -y\n    echo &quot;nload 已经安装完成&quot;\nelse\n    echo &#39;nload 已安装&#39;\nfi\n\n#判断文件是否存在\nfile=&quot;file.txt&quot;\nif [ ! -e $file ]\nthen\n\n echo &quot;文件不存在&quot;\n touch file.txt\nsleep 2\necho &quot;文件已创建&quot;\n\nelse\n\n echo &quot;文件已经存在&quot;\n\nfi\n#备份旧的IFS变量\nOLDIFS=&quot;IFS&quot;  \n#修改分隔符为换行符\nIFS=$&#39;\\n&#39;  \ntouch blacklist.txt &gt;&gt; /dev/null\ntouch black.txt &gt;&gt; /dev/null\n#将ip信息存入file.txt\nnetstat -ntu|awk &#39;{print $5}&#39;|cut -d: -f1 -s|sort|uniq -c|sort -nk1 -r|sed &#39;s/[\\t ]\\+/ /g&#39; |sed &#39;/81.68.172.160/&#39;d |sed &#39;/127.0.0.1/&#39;d&gt;file.txt \n#遍历文件ip\nfor ip in `cat file.txt`\ndo\n#将取出的ip占有量 临时存放给变量num\nnum=`echo $ip | awk &#39;{print $1}&#39;`\n#如果ip占有量超过20\nif [ $num -gt 20 ] \nthen\n#则将ip进行显示\necho $ip | awk &#39;{print $2}&#39; \n#将ip加入黑名单\nblacklist=`echo $ip | awk &#39;{print $2}&#39; `\niptables -I INPUT -s $blacklist -j DROP\necho $blacklist &gt;&gt; blacklist.txt\necho $blacklist &gt;&gt; black.txt\nfi\ndone\n#cat blacklist.txt|sed -e &#39;/^$/d&#39; &gt; blacklist.txt\n#cat black.txt|sed -e &#39;/^$/d&#39; &gt; black.txt\nif [ -s blacklist.txt ];then\n\n  echo &quot;黑名单列表：&quot;\n  cat blacklist.txt\n  echo &quot;可疑ip已加入黑名单&quot;\n  echo &quot;本脚本加入的黑名单可查看black.txt文件&quot;\nelse\n  echo &quot;机器目前状态良好&quot;\nfi\nrm -rf  blacklist.txt\nIFS=&quot;$OLDIFS&quot; #还原IFS变量\n</code></pre>\n<pre><code class=\"language-shell\">#!/bin/bash\n#判断用户，并且批量创建\nread -p &quot;请输入您要设置的用户名的密码：&quot; PASSWD\nfor UNAME in `cat user.txt`\ndo\n    id $UNAME &amp;&gt; /dec/null\n    if [ $? -eq 0 ];then\n        echo &quot;用户$UNAME已经存在&quot;\n    else\n        useradd $UNAME &amp;&gt; /dev/null\n        echo &quot;$PASSWD&quot;|passwd --stdin $UNAME &amp;&gt; /dev/null\n    fi\ndone\n</code></pre>\n<pre><code class=\"language-shell\">#!/bin/bash\n#遍历局域网ip,并测试是否在线\nstr=&quot;10.10.1.&quot;\nfor ip in {200..220}\ndo\nping -c1 -w1 $str$ip &amp;&gt; /dev/null\n        if [ $? -eq 0 ];then\n                echo &quot;$str$ip 是在线的&quot;\n        fi\ndone\n</code></pre>\n<p><strong><font color=\"#0000dd\">while条件循环语句</font></strong></p>\n<pre><code class=\"language-shell\">#!/bin/bash\n#while 语句编写猜数字\n#取100以内的随机数\nRDOM=$(expr $RANDOM % 1000)\n#猜的数字的次数\nsum=0\necho &quot;------猜数字小游戏------&quot;\nwhile true\ndo\nread -p &quot;请输入一个1000以内的数字：&quot; NUM\nlet TIMES++\nexpr $NUM + 1 &amp;&gt; /dev/null\nif [ $? != 0 ];then\n    echo &quot;输入有误,请重新输入&quot;\nelif [ $NUM -gt 1000 ];then\n    echo &quot;请输入小等于1000的数字。&quot;\nelif [ $NUM -lt 0 ];then\n    echo &quot;请输入大于等于0的数字。&quot;\nelif [ $NUM -eq $RDOM ];then\n    echo &quot;恭喜你，猜对了！！&quot;\n    echo &quot;你一共猜了 $TIMES次&quot;\n    exit 0\nelif [ $NUM -gt $RDOM ];then\n    echo &quot;你猜大了！！&quot;\nelif [ $NUM -lt $RDOM ];then\n    echo &quot;你猜小了！！&quot;\nelse &quot;您的输入有误！！&quot;\nfi\ndone\n</code></pre>\n<p><strong><font color=\"#0000dd\">case条件测试语句</font></strong></p>\n<pre><code class=\"language-shell\">#!/bin/bash\n#case语句，判断\nread -p &quot;Enter:&quot; KEY\ncase &quot;$KEY&quot; in\n[a-z]|[A-Z])\necho &quot;字母&quot;\n;;\n[0-9])\necho &quot;数字&quot;\n;;\n*)\necho &quot;错误&quot;\n;;\nesac\n</code></pre>\n<p><strong><font color=\"#0000dd\">计划任务服务程序</font></strong></p>\n<p><strong>一次性的计划任务：at</strong>\nat 时间 &gt; reboot\n保存:Ctrl+D\n查看当前已有哪些计划任务 ：at -l\n查看命令：at -c 编码\n删除计划任务：atrm 编码 或者 at -r</p>\n<p> at命令的参数及其作用</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-f</td>\n<td>指定包含命令的任务文件</td>\n</tr>\n<tr>\n<td>-q</td>\n<td>指定新任务名称</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>显示待执行任务列表</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>删除指定待执行任务</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>任务执行后给用户发邮件</td>\n</tr>\n</tbody></table>\n<pre><code class=\"language-shell\">#让at命令接收前面echo命令的输出信息\necho &quot;systemctl restart httpd&quot; | at 23:30\n</code></pre>\n<p>一般我们会使用“at now +2 MINUTE”的方式进行操作，这表示2分钟（MINUTE）后执行这个任务，也可以将其替代成小时（HOUR）、日（DAY）、月（MONTH）等词汇：</p>\n<pre><code class=\"language-shell\">at now +2 MINUTE\nat&gt; systemctl restart httpd\nCtrl+D\n</code></pre>\n<p><strong>周期性的计划任务：crond</strong></p>\n<p>crond 服务名称\ncrontab 配置工具\n<font color=\"00dddd\">分 时 日 月 星期 命令</font></p>\n<p>​     crontab命令的参数及其作用</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-e</td>\n<td>编辑计划任务</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>指定用户名称</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>列出任务列表</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>删除计划任务</td>\n</tr>\n</tbody></table>\n<p>​     使用crond设置任务的参数字段说明</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>分钟</td>\n<td>取值为0～59的整数</td>\n</tr>\n<tr>\n<td>小时</td>\n<td>取值为0～23的任意整数</td>\n</tr>\n<tr>\n<td>日期</td>\n<td>取值为1～31的任意整数</td>\n</tr>\n<tr>\n<td>月份</td>\n<td>取值为1～12的任意整数</td>\n</tr>\n<tr>\n<td>星期</td>\n<td>取值为0～7的任意整数，其中0与7均为星期日</td>\n</tr>\n<tr>\n<td>命令</td>\n<td>要执行的命令或程序脚本</td>\n</tr>\n</tbody></table>\n<pre><code class=\"language-shell\">crontab -e\n#分 时 日 月 星期 命令\n#每周日的0：30分重启\n30 0 * * 7 /usr/sbin/reboot\n#每隔两小时重启\n* */2 * * * /usr/sbin/reboot\n#每月的3-5号的2：30分重启\n30 2 3-5 * * /usr/sbin/reboot\n#每月的3号5号7号的2：30分重启\n30 2 3,5,7 * * /usr/sbin/reboot\n</code></pre>\n",
            "author": {
                "name": "koke"
            },
            "tags": [
            ],
            "date_published": "2022-08-01T09:46:53+08:00",
            "date_modified": "2022-08-01T09:46:53+08:00"
        }
    ]
}
